[gd_scene load_steps=16 format=2]

[ext_resource path="res://World.tscn" type="PackedScene" id=1]
[ext_resource path="res://PostProcess.gd" type="Script" id=2]
[ext_resource path="res://FPSLabel.gd" type="Script" id=3]
[ext_resource path="res://UI/MainUI.tscn" type="PackedScene" id=4]
[ext_resource path="res://Fog/player_vis.gd" type="Script" id=5]
[ext_resource path="res://Fog/Fogoise.tres" type="Texture" id=6]
[ext_resource path="res://Fog/minimap_paint.png" type="Texture" id=10]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 camera_offset;
uniform sampler2D fog_of_war_texture : hint_albedo;
uniform float fog_scale;

uniform sampler2D noise_texture : hint_albedo;
uniform float noise_intensity : hint_range(0, 1);
uniform vec4 noise_color : hint_color;


void fragment() {
	vec4 texelColor = texture(TEXTURE, SCREEN_UV);
	// grayscale
	float luminance = dot(texelColor.rgb, vec3(0.22, 0.707, 0.071));
	vec4 gray_color = vec4(luminance, luminance, luminance, texelColor.a);
	
	vec2 cam_uv = UV/fog_scale + vec2(0.45) + camera_offset/fog_scale;
	float discovered = 1.0 - textureLod(fog_of_war_texture, cam_uv, 4.0).a;
	
	vec2 fog_uv = UV + camera_offset;
	float fog_speed = 0.08;
	vec4 noise1 = texture(noise_texture, fog_uv + TIME * fog_speed);
	vec4 noise2 = texture(noise_texture, vec2(fog_uv.y, fog_uv.x) - TIME * fog_speed);
	
	vec4 final = mix(noise1, noise2, 0.5);
	final = final - noise_intensity;
	
	final.a = 1.0;
//	if (final.a < 0.0) {
//		final.a = final.r * noise_intensity;
//	}
	//final.rgb = -final.rgb + vec3(1);
	//final.rgb = mix(final.rgb, noise_color.rgb, 1);
	
	final = final * gray_color;
	final.rgb = mix(final.rgb, noise_color.rgb, 0.3);
	//final.a = final.a * gray_color.a;


	COLOR = mix(texelColor, final, discovered);
	
	// disable fog
	COLOR = texelColor;
}"

[sub_resource type="ViewportTexture" id=2]
viewport_path = NodePath("FogOfWarViewport")

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/camera_offset = null
shader_param/fog_scale = 5.0
shader_param/noise_intensity = 0.34
shader_param/noise_color = Color( 0, 0.215686, 0.470588, 1 )
shader_param/fog_of_war_texture = SubResource( 2 )
shader_param/noise_texture = ExtResource( 6 )

[sub_resource type="QuadMesh" id=4]
size = Vector2( 512, 512 )

[sub_resource type="Shader" id=5]
code = "shader_type spatial;
render_mode unshaded, cull_disabled, depth_test_disable;

uniform sampler2D baseAlbedo : hint_albedo;

uniform vec2 camera_offset;

uniform sampler2D noise_texture : hint_albedo;
uniform float noise_intensity : hint_range(0, 1);
uniform vec4 noise_color : hint_color;


void fragment() {
	vec4 texelColor = texture(baseAlbedo, UV);
//	// grayscale
//	float luminance = dot(texelColor.rgb, vec3(0.22, 0.707, 0.071));
//	vec4 gray_color = vec4(luminance, luminance, luminance, texelColor.a);
//
//	vec2 fog_uv = UV;
//	float fog_speed = 0.08;
//	vec4 noise1 = texture(noise_texture, fog_uv + TIME * fog_speed);
//	vec4 noise2 = texture(noise_texture, vec2(fog_uv.y, fog_uv.x) - TIME * fog_speed);
//
//	vec4 final = mix(noise1, noise2, 0.5);
//	final = final - noise_intensity;
	
//	final.a = 1.0;
	//final.rgb = -final.rgb + vec3(1);
	//final.rgb = mix(final.rgb, noise_color.rgb, 1);
	
//	final = final * gray_color;
//	final.rgb = mix(final.rgb, noise_color.rgb, 0.3);
	//final.a = final.a * gray_color.a;


	//COLOR = mix(texelColor, final, discovered);
	
	// disable fog
	ALBEDO = vec3(0);
	ALPHA = 1.0 - texelColor.r;
}"

[sub_resource type="ViewportTexture" id=6]
viewport_path = NodePath("FogOfWarViewport")

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/camera_offset = null
shader_param/noise_intensity = null
shader_param/noise_color = null
shader_param/baseAlbedo = SubResource( 6 )

[sub_resource type="ViewportTexture" id=8]
viewport_path = NodePath("FogOfWarViewport")

[node name="Game" type="Node2D"]

[node name="FogOfWarViewport" type="Viewport" parent="."]
size = Vector2( 2048, 2048 )
handle_input_locally = false
disable_3d = true
usage = 0
render_target_v_flip = true
render_target_clear_mode = 1
render_target_update_mode = 1

[node name="player_vis" type="Sprite" parent="FogOfWarViewport"]
position = Vector2( 960, 540 )
scale = Vector2( 1.6, 1.6 )
texture = ExtResource( 10 )
script = ExtResource( 5 )

[node name="GameWorld" type="ViewportContainer" parent="."]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 1920.0
margin_bottom = 1080.0
mouse_filter = 2
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="GameWorld"]
size = Vector2( 1920, 1080 )
handle_input_locally = false
msaa = 2
render_target_update_mode = 3

[node name="World" parent="GameWorld/Viewport" instance=ExtResource( 1 )]

[node name="MeshInstance" type="MeshInstance" parent="GameWorld/Viewport"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, 1, 0, -1, -1.62921e-07, 0, 0.233814, 0 )
mesh = SubResource( 4 )
material/0 = SubResource( 7 )

[node name="UILayer" type="CanvasLayer" parent="."]

[node name="MainUI" parent="UILayer" instance=ExtResource( 4 )]

[node name="Minimap" type="PanelContainer" parent="."]
margin_left = 30.3436
margin_top = 850.57
margin_right = 251.344
margin_bottom = 1044.57
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="Minimap"]
margin_left = 7.0
margin_top = 7.0
margin_right = 214.0
margin_bottom = 187.0
texture = SubResource( 8 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FpsLabel" type="CanvasLayer" parent="."]
script = ExtResource( 3 )
